# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (leave empty to use version from pyproject.toml)'
        required: false
        default: ''
        type: string

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine tomli
    
    - name: Extract version from pyproject.toml
      id: get-version
      run: |
        # Extract version from pyproject.toml
        VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Extracted version: $VERSION"
    
    - name: Update version if specified
      if: ${{ github.event.inputs.version != '' }}
      run: |
        echo "Using manually specified version: ${{ github.event.inputs.version }}"
        echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        # Update version in pyproject.toml
        sed -i "s/version = \"${{ env.VERSION }}\"/version = \"${{ github.event.inputs.version }}\"/" pyproject.toml
        # Update version in __init__.py
        sed -i "s/__version__ = \"${{ env.VERSION }}\"/__version__ = \"${{ github.event.inputs.version }}\"/" nexuscontroller/__init__.py
    
    - name: Verify package structure
      run: |
        echo "Checking package structure and dependencies..."
        ls -la nexuscontroller/
        python -c "import sys; from pathlib import Path; sys.exit(0 if Path('nexuscontroller/__init__.py').exists() else 1)"
        echo "Using version: ${{ env.VERSION }}"
      
    - name: Build package
      run: python -m build
      
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: false
        verbose: true 
